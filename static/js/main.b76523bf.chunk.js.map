{"version":3,"sources":["redux/actions/actions.ts","API.ts","copmonents/PopupCurrencies.tsx","utils/hooks.ts","copmonents/Currencies/Currencies.tsx","copmonents/Converter-view.tsx","copmonents/ConverterContainer/Converter.tsx","copmonents/ConverterContainer/ConverterContainer.tsx","copmonents/ListOfCurrencies/ListOfCurrencies.tsx","copmonents/Header/Header.tsx","App.tsx","reportWebVitals.ts","redux/reducer/converter-reducer.ts","redux/store.ts","index.tsx"],"names":["ActionsTypes","instance","axios","create","baseURL","changeFieldValueAC","amountFirstField","amountSecondField","type","CHANGE_FIELD_VALUE","payload","setLoadingAC","value","SET_LOADING","setPopupCurrencyAC","firstPopupCurrency","secondPopupCurrency","SET_POPUP_CURRENCY","setMainCurrenciesAC","currencies","SET_MAIN_CURRENCY","PopupCurrencies","changePopupCurrency","width","popupRef","useSelector","state","converter","onChange","e","currentTarget","className","map","el","CharCode","Name","slice","ID","ref","onClick","useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Currencies","React","memo","props","popupCurrency","changeCurrency","currentCurrency","onChangeVisible","toggle","mainCurrencies","styleForToggle","style","height","viewBox","fill","xmlns","d","ConverterView","count","onChangeFieldValue","Converter","changeFirstFieldValue","changeSecondFieldValue","rateFirstCurrency","rateSecondCurrency","currencyFirstField","currencySecondField","countFirstField","countSecondField","dispatch","useDispatch","list","isVisible","setIsVisible","useRef","useEffect","document","body","handleOutsideClick","path","includes","current","onChangeCurrencyFirstField","currencyOfFirstField","onChangeCurrencySecondField","currencyOfSecondField","changeFirstPopupCurrency","currency","changeSecondPopupCurrency","rateForFirstField","toFixed","rateForSecondField","toggleForFirst","toggleForSecond","CurrencyContainer","currencyObjectOfFirstField","find","currencyObjectOfSecondField","rateForChangeValue","Value","firstCurrency","secondCurrency","SET_CURRENT_CURRENCY","ListOfCurrencies","currenciesForList","changes","Previous","changesStyle","Nominal","Header","to","App","loading","a","get","then","resp","data","Valute","Object","values","SET_CURRENCIES","USD","EUR","JPY","CHF","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","NumCode","reducers","combineReducers","action","filteredCurrencies","filter","sort","b","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.b76523bf.chunk.js","sourcesContent":["// TYPES\r\nimport {Dispatch} from 'redux';\r\nimport {Currency} from '../reducer/converter-reducer';\r\nimport {getData} from '../../API';\r\n\r\nexport enum ActionsTypes {\r\n    SET_CURRENCIES = 'SET_CURRENCIES',\r\n    SET_CURRENT_CURRENCY = 'SET_CURRENT_CURRENCY',\r\n    CHANGE_FIELD_VALUE = 'SET_FIELD_VALUE',\r\n    SET_LOADING = 'SET_LOADING',\r\n    SET_POPUP_CURRENCY = 'SET_FIRST_POPUP_CURRENCY',\r\n    SET_MAIN_CURRENCY = 'SET_MAIN_CURRENCY'\r\n}\r\n\r\nexport type CurrencyActionsTypeInProgress = ReturnType<typeof setCurrenciesAC>\r\n    | ReturnType<typeof setCurrentCurrency>\r\n    | ReturnType<typeof changeFieldValueAC>\r\n    | ReturnType<typeof setLoadingAC>\r\n    | ReturnType<typeof setPopupCurrencyAC>\r\n    | ReturnType<typeof setMainCurrenciesAC>\r\n\r\n// ACTION CREATORS\r\nexport const setCurrenciesAC = (currencies: Currency[]) => ({\r\n    type: ActionsTypes.SET_CURRENCIES,\r\n    payload: currencies\r\n} as const)\r\nexport const setCurrentCurrency = (currencyOfFirstField: string, currencyOfSecondField: string) => ({\r\n    type: ActionsTypes.SET_CURRENT_CURRENCY,\r\n    payload: {\r\n        currencyOfFirstField,\r\n        currencyOfSecondField\r\n    }\r\n} as const)\r\nexport const changeFieldValueAC = (amountFirstField: string, amountSecondField: string) => ({\r\n    type: ActionsTypes.CHANGE_FIELD_VALUE,\r\n    payload: {\r\n        amountFirstField,\r\n        amountSecondField\r\n    }\r\n} as const)\r\nexport const setLoadingAC = (value: boolean) => ({\r\n    type: ActionsTypes.SET_LOADING,\r\n    payload: value\r\n} as const)\r\nexport const setPopupCurrencyAC = (firstPopupCurrency: string, secondPopupCurrency: string) => ({\r\n    type: ActionsTypes.SET_POPUP_CURRENCY,\r\n    payload: {\r\n        firstPopupCurrency,\r\n        secondPopupCurrency\r\n    }\r\n} as const)\r\nexport const setMainCurrenciesAC = (currencies: Currency[]) => ({\r\n    type: ActionsTypes.SET_MAIN_CURRENCY,\r\n    payload: currencies\r\n} as const)\r\n\r\n// THUNK CREATORS\r\nexport const getCurrencies = () => async (dispatch: Dispatch) => {\r\n    dispatch(setLoadingAC(true))\r\n    let {Valute} = await getData()\r\n    dispatch(setCurrenciesAC(Object.values(Valute)))\r\n    dispatch(setMainCurrenciesAC([Valute.USD, Valute.EUR, Valute.JPY]))\r\n    dispatch(setPopupCurrencyAC(Valute.CHF.CharCode, Valute.CHF.CharCode))\r\n    dispatch(setLoadingAC(false))\r\n}","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: `https://www.cbr-xml-daily.ru/daily_json.js`\r\n})\r\n\r\n\r\nexport const getData = () => {\r\n    return instance.get(``).then(resp => {\r\n        return resp.data\r\n    })\r\n}","import React, {LegacyRef} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {storeRootType} from '../redux/store';\r\n\r\ntype CurrenciesListPropsType = {\r\n    changePopupCurrency: (currency: string) => void\r\n    width: number\r\n    popupRef?: LegacyRef<HTMLDivElement> | undefined\r\n}\r\n\r\nconst PopupCurrencies = ({changePopupCurrency, width, popupRef}: CurrenciesListPropsType) => {\r\n\r\n    const {currencies} = useSelector((state: storeRootType) => state.converter)\r\n\r\n    if (width < 990) {\r\n        return (\r\n            <select  onChange={(e) => changePopupCurrency(e.currentTarget.value)} className=\"currenciesList-select\">\r\n                {\r\n                    currencies.map(el => {\r\n                        if (el.CharCode === 'GBP') {\r\n                            return (\r\n                                <option\r\n                                    value={el.CharCode}\r\n                                    key={`${el.Name} ${el.ID}`}>\r\n                                    {el.Name.slice(0, 15)}\r\n                                </option>\r\n                            )\r\n                        }\r\n                        return (\r\n                            <option\r\n                                value={el.CharCode}\r\n                                key={`${el.Name} ${el.ID}`}>\r\n                                {el.Name}\r\n                            </option>\r\n                        )\r\n                    })\r\n                }\r\n            </select>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div ref={popupRef} className=\"currenciesList\">\r\n            {\r\n                currencies.map(el => {\r\n                    if (el.CharCode === 'GBP') {\r\n                        return (\r\n                            <div\r\n                                onClick={() => changePopupCurrency(el.CharCode)}\r\n                                key={`${el.Name} ${el.ID}`}\r\n                                className=\"currenciesList-item\">\r\n                                <span>{el.Name.slice(0, 15)}</span>\r\n                                <span>{el.CharCode}</span>\r\n                            </div>\r\n                        )\r\n                    }\r\n                    return (\r\n                        <div\r\n                            onClick={() => changePopupCurrency(el.CharCode)}\r\n                            key={`${el.Name} ${el.ID}`}\r\n                            className=\"currenciesList-item\">\r\n                            <span>{el.Name}</span>\r\n                            <span>{el.CharCode}</span>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PopupCurrencies;","import {useLayoutEffect, useState} from 'react';\r\n\r\nexport const useWindowSize = () => {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n}","import React from 'react';\r\nimport {Currency} from '../../redux/reducer/converter-reducer';\r\nimport './Currencies.scss'\r\nimport {useSelector} from 'react-redux';\r\nimport {storeRootType} from '../../redux/store';\r\nimport PopupCurrencies from '../PopupCurrencies';\r\n\r\ntype CurrenciesPropsType = {\r\n    onChangeVisible: () => void\r\n    changeCurrency: (currency: string) => void\r\n    currentCurrency: string\r\n    popupCurrency: Currency\r\n    toggle: boolean\r\n    changePopupCurrency: (currency: string) => void\r\n    width: number\r\n}\r\n\r\nconst Currencies = React.memo((props: CurrenciesPropsType) => {\r\n    const {\r\n        popupCurrency,  changeCurrency,\r\n        currentCurrency, onChangeVisible,\r\n        width, toggle, changePopupCurrency\r\n    } = props\r\n\r\n    const {mainCurrencies} = useSelector((state: storeRootType) => state.converter)\r\n\r\n    const styleForToggle = `currencies-block toggle ${toggle ? 'active' : ''}`\r\n\r\n    return (\r\n        <div className=\"currencies\">\r\n            <ul>\r\n                {\r\n                    mainCurrencies.map(el => {\r\n                        const style = `currencies-block ${currentCurrency === el.CharCode ? 'active' : ''}`\r\n\r\n                        return <li\r\n                            key={`${el.ID} ${el.CharCode}`}\r\n                            onClick={() => changeCurrency(el.CharCode)}\r\n                            className={style}>{el.CharCode}</li>\r\n                    })\r\n                }\r\n                <li\r\n                    className={`currencies-block ${currentCurrency === popupCurrency.CharCode ? 'active' : ''}`}\r\n                    onClick={() => changeCurrency(popupCurrency.CharCode)}>{popupCurrency.CharCode}\r\n                </li>\r\n                {\r\n                    width > 990\r\n                        ? <li className={styleForToggle} onClick={() => onChangeVisible()}>\r\n                            <svg\r\n                                className={toggle ? 'rotated' : ''}\r\n                                width=\"13\"\r\n                                height=\"10\"\r\n                                viewBox=\"0 0 10 6\"\r\n                                fill=\"black\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path\r\n                                    d=\"M10 5C10 5.16927 9.93815 5.31576 9.81445 5.43945C9.69075 5.56315 9.54427 5.625 9.375 5.625H0.625C0.455729 5.625 0.309245 5.56315 0.185547 5.43945C0.061849 5.31576 0 5.16927 0 5C0 4.83073 0.061849 4.68424 0.185547 4.56055L4.56055 0.185547C4.68424 0.061849 4.83073 0 5 0C5.16927 0 5.31576 0.061849 5.43945 0.185547L9.81445 4.56055C9.93815 4.68424 10 4.83073 10 5Z\"\r\n                                    fill=\"#2C2C2C\"\r\n                                />\r\n                            </svg>\r\n                        </li>\r\n                        : <li className={styleForToggle}>\r\n                            <svg\r\n                                width=\"13\"\r\n                                height=\"10\"\r\n                                viewBox=\"0 0 10 6\"\r\n                                fill=\"black\"\r\n                                xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path\r\n                                    d=\"M10 5C10 5.16927 9.93815 5.31576 9.81445 5.43945C9.69075 5.56315 9.54427 5.625 9.375 5.625H0.625C0.455729 5.625 0.309245 5.56315 0.185547 5.43945C0.061849 5.31576 0 5.16927 0 5C0 4.83073 0.061849 4.68424 0.185547 4.56055L4.56055 0.185547C4.68424 0.061849 4.83073 0 5 0C5.16927 0 5.31576 0.061849 5.43945 0.185547L9.81445 4.56055C9.93815 4.68424 10 4.83073 10 5Z\"\r\n                                    fill=\"#2C2C2C\"\r\n                                />\r\n                            </svg>\r\n                            <PopupCurrencies\r\n                                width={width}\r\n                                changePopupCurrency={changePopupCurrency}/>\r\n                        </li>\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default Currencies","import React from 'react';\r\nimport Currencies from './Currencies/Currencies';\r\nimport {Currency} from '../redux/reducer/converter-reducer';\r\n\r\ntype ConverterViewType = {\r\n    count: string\r\n    onChangeFieldValue: (value: string) => void\r\n    onChangeVisible: () => void\r\n    changeCurrency: (currency: string) => void\r\n    currentCurrency: string\r\n    popupCurrency: Currency\r\n    toggle: boolean\r\n    changePopupCurrency: (currency: string) => void\r\n    width: number\r\n}\r\n\r\nconst ConverterView = (props: ConverterViewType) => {\r\n    const {\r\n        count, onChangeFieldValue,\r\n        changePopupCurrency, width, toggle,\r\n        changeCurrency, currentCurrency,\r\n        onChangeVisible, popupCurrency\r\n    } = props\r\n\r\n    const onChangeFieldHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        let value = e.currentTarget.value\r\n        onChangeFieldValue(value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Currencies\r\n                width={width}\r\n                changePopupCurrency={changePopupCurrency}\r\n                toggle={toggle}\r\n                popupCurrency={popupCurrency}\r\n                changeCurrency={changeCurrency}\r\n                currentCurrency={currentCurrency}\r\n                onChangeVisible={() => onChangeVisible()}\r\n            />\r\n            <input type={'number'} value={count} onChange={onChangeFieldHandler}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ConverterView;","import React, {useEffect, useRef, useState} from 'react';\r\nimport './Converter.scss'\r\nimport {Currency} from '../../redux/reducer/converter-reducer';\r\nimport PopupCurrencies from '../PopupCurrencies';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {storeRootType} from '../../redux/store';\r\nimport {setPopupCurrencyAC} from '../../redux/actions/actions';\r\nimport {useWindowSize} from '../../utils/hooks';\r\nimport ConverterView from '../Converter-view';\r\n\r\ntype ConverterPropsType = {\r\n    rateFirstCurrency: number\r\n    rateSecondCurrency: number\r\n    changeCurrency: (currencyOfFirstField: string, currencyOfSecondField: string, value: string) => void\r\n    currencies: Currency[]\r\n    changeFirstFieldValue: (value: string) => void\r\n    changeSecondFieldValue: (value: string) => void\r\n}\r\n\r\nexport const Converter = (props: ConverterPropsType) => {\r\n    const {\r\n        changeFirstFieldValue, changeSecondFieldValue,\r\n        changeCurrency, rateFirstCurrency, rateSecondCurrency\r\n    } = props\r\n    const {\r\n        firstPopupCurrency, secondPopupCurrency,\r\n        currencyFirstField, currencySecondField,\r\n        countFirstField, countSecondField\r\n    } = useSelector((state: storeRootType) => state.converter)\r\n    const dispatch = useDispatch()\r\n\r\n    const [isVisible, setIsVisible] = useState<{ list: 'first' | 'second' | null }>({list: null})\r\n    const [width] = useWindowSize()\r\n    const popupRef = useRef<any>()\r\n    useEffect(() => {\r\n        if (isVisible.list && width > 990) {\r\n            document.body.addEventListener('click', handleOutsideClick)\r\n        }\r\n        return () => {\r\n            document.body.removeEventListener('click', handleOutsideClick)\r\n        }\r\n    }, [isVisible, width])\r\n\r\n    const onChangeVisible = (value: 'first' | 'second' | null) => {\r\n        setIsVisible({list: value})\r\n    }\r\n    const handleOutsideClick = (e: any) => {\r\n        if (!e.path.includes(popupRef.current)) {\r\n            setIsVisible({list: null})\r\n        }\r\n    }\r\n\r\n    const onChangeCurrencyFirstField = (currencyOfFirstField: string) => {\r\n        changeCurrency(currencyOfFirstField, currencySecondField, countFirstField)\r\n    }\r\n    const onChangeCurrencySecondField = (currencyOfSecondField: string) => {\r\n        changeCurrency(currencyFirstField, currencyOfSecondField, countFirstField)\r\n    }\r\n    const changeFirstPopupCurrency = (currency: string) => {\r\n        onChangeVisible(null)\r\n        if (!(currency === 'USD' || currency === 'EUR' || currency === 'RUR' || currency === 'JPY')) {\r\n            dispatch(setPopupCurrencyAC(currency, secondPopupCurrency.CharCode))\r\n        }\r\n        onChangeCurrencyFirstField(currency)\r\n    }\r\n    const changeSecondPopupCurrency = (currency: string) => {\r\n        onChangeVisible(null)\r\n        if (!(currency === 'USD' || currency === 'EUR' || currency === 'RUR' || currency === 'JPY')) {\r\n            dispatch(setPopupCurrencyAC(firstPopupCurrency.CharCode, currency))\r\n        }\r\n        onChangeCurrencySecondField(currency)\r\n    }\r\n    const swapCurrencies = () => {\r\n        changeCurrency(currencySecondField, currencyFirstField, countFirstField)\r\n        dispatch(setPopupCurrencyAC(secondPopupCurrency.CharCode, firstPopupCurrency.CharCode))\r\n    }\r\n\r\n    const rateForFirstField = rateFirstCurrency.toFixed(4)\r\n    const rateForSecondField = rateSecondCurrency.toFixed(4)\r\n    const toggleForFirst = isVisible.list === 'first'\r\n    const toggleForSecond = isVisible.list === 'second'\r\n    return (\r\n        <div className=\"main\">\r\n            <h1>Currency converter</h1>\r\n            <div className=\"converterBlock\">\r\n                <div className='converterField'>\r\n                    <span>You give </span>\r\n                    <ConverterView\r\n                        width={width}\r\n                        changePopupCurrency={changeFirstPopupCurrency}\r\n                        toggle={toggleForFirst}\r\n                        popupCurrency={firstPopupCurrency}\r\n                        count={countFirstField}\r\n                        changeCurrency={onChangeCurrencyFirstField}\r\n                        onChangeVisible={() => onChangeVisible('first')}\r\n                        onChangeFieldValue={changeFirstFieldValue}\r\n                        currentCurrency={currencyFirstField}\r\n                    />\r\n                    <span>1 {currencyFirstField} = {rateForFirstField} {currencySecondField}</span>\r\n                </div>\r\n                <button className={'active'} onClick={() => swapCurrencies()}>Swap</button>\r\n                <div  className='converterField'>\r\n                    <span>You get </span>\r\n                    <ConverterView\r\n                        width={width}\r\n                        toggle={toggleForSecond}\r\n                        popupCurrency={secondPopupCurrency}\r\n                        count={countSecondField}\r\n                        changeCurrency={onChangeCurrencySecondField}\r\n                        onChangeVisible={() => onChangeVisible('second')}\r\n                        onChangeFieldValue={changeSecondFieldValue}\r\n                        currentCurrency={currencySecondField}\r\n                        changePopupCurrency={changeSecondPopupCurrency}\r\n                    />\r\n                    <span>1 {currencySecondField} = {rateForSecondField} {currencyFirstField}</span>\r\n                </div>\r\n            </div>\r\n            {(isVisible.list && width > 990) && <PopupCurrencies\r\n                popupRef={popupRef}\r\n                width={width}\r\n                changePopupCurrency={isVisible.list === 'first' ? changeFirstPopupCurrency : changeSecondPopupCurrency}/>}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeFieldValueAC, setCurrentCurrency} from '../../redux/actions/actions';\r\nimport {Converter} from './Converter';\r\nimport {storeRootType} from '../../redux/store';\r\n\r\nexport const CurrencyContainer = () => {\r\n    const dispatch = useDispatch()\r\n    const {\r\n        currencies, currencyFirstField, currencySecondField,\r\n    } = useSelector((state: storeRootType) => state.converter)\r\n\r\n    // Поиск объектов валюты\r\n    let currencyObjectOfFirstField = currencies.find(el => el.CharCode === currencyFirstField)\r\n    let currencyObjectOfSecondField = currencies.find(el => el.CharCode === currencySecondField)\r\n\r\n    // Здесь вычилсяется значение, которое далее используется для ковертации\r\n    let rateForChangeValue = currencyObjectOfFirstField!.Value / currencyObjectOfSecondField!.Value\r\n    let rateForSecondField =  currencyObjectOfSecondField!.Value / currencyObjectOfFirstField!.Value\r\n\r\n    // Проверка того, является ли валюта рублём\r\n    if (currencyFirstField === 'RUR') {\r\n        rateForChangeValue = 1 / currencyObjectOfSecondField!.Value\r\n        rateForSecondField = currencyObjectOfSecondField!.Value\r\n    }\r\n    if (currencySecondField === 'RUR') {\r\n        rateForChangeValue = currencyObjectOfFirstField!.Value\r\n        rateForSecondField = 1 / currencyObjectOfFirstField!.Value\r\n    }\r\n    if (currencyObjectOfFirstField!.CharCode === 'RUR' && currencyObjectOfSecondField!.CharCode === 'RUR') {\r\n        rateForChangeValue = 1\r\n        rateForSecondField = 1\r\n    }\r\n\r\n    // Функция для смены валюты и пересчёта значение, в соответствии с новой валютой. Также присутствует проверка на 'рубль'\r\n    const changeCurrency = (firstCurrency: string, secondCurrency: string, value: string) => {\r\n        currencyObjectOfFirstField = currencies.find(el => el.CharCode === firstCurrency)\r\n        currencyObjectOfSecondField = currencies.find(el => el.CharCode === secondCurrency)\r\n        rateForChangeValue = currencyObjectOfFirstField!.Value / currencyObjectOfSecondField!.Value\r\n        if (currencyObjectOfFirstField!.CharCode === 'RUR') {\r\n            rateForChangeValue = 1 / currencyObjectOfSecondField!.Value\r\n        }\r\n        if (currencyObjectOfSecondField!.CharCode === 'RUR') {\r\n            rateForChangeValue = currencyObjectOfFirstField!.Value\r\n        }\r\n        if (currencyObjectOfFirstField!.CharCode === 'RUR' && currencyObjectOfSecondField!.CharCode === 'RUR') {\r\n            rateForChangeValue = 1\r\n        }\r\n        dispatch(setCurrentCurrency(firstCurrency, secondCurrency))\r\n        changeFirstFieldValue(value)\r\n    }\r\n\r\n    // Эти функции отвечают за конвертацию валюты\r\n    const changeFirstFieldValue = (value: string) => {\r\n        if (value === '') {\r\n            dispatch(changeFieldValueAC(value, value))\r\n        } else {\r\n            dispatch(changeFieldValueAC(value, (+value * rateForChangeValue).toFixed(2)))\r\n        }\r\n    }\r\n    const changeSecondFieldValue = (value: string) => {\r\n        if (value === '') {\r\n            dispatch(changeFieldValueAC(value, value))\r\n        } else {\r\n            dispatch(changeFieldValueAC((+value / rateForChangeValue).toFixed(2), value))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Converter\r\n            rateSecondCurrency={rateForSecondField}\r\n            rateFirstCurrency={rateForChangeValue}\r\n            changeCurrency={changeCurrency}\r\n            changeFirstFieldValue={changeFirstFieldValue}\r\n            currencies={currencies}\r\n            changeSecondFieldValue={changeSecondFieldValue}\r\n        />\r\n\r\n    )\r\n}","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {storeRootType} from '../../redux/store';\r\nimport {CurrencyReducerStateType} from '../../redux/reducer/converter-reducer';\r\nimport './ListOfCurrencies.scss'\r\nimport {useWindowSize} from '../../utils/hooks';\r\n\r\nconst ListOfCurrencies = () => {\r\n    const {currenciesForList} = useSelector<storeRootType, CurrencyReducerStateType>(state => state.converter)\r\n    const [width] = useWindowSize()\r\n    return (\r\n        <div className=\"ListOfCurrenciesBlock\">\r\n            <h1>List of currencies</h1>\r\n\r\n            <div className=\"ListOfCurrencies\">\r\n                <div className=\"ListOfCurrencies-description\">\r\n                    <div>Code</div>\r\n                    <div>Nominal</div>\r\n                    {\r\n                        width > 700\r\n                            ? <div className=\"ListOfCurrencies-description__name\">Name</div>\r\n                            : null\r\n                    }\r\n                    <div>Rate</div>\r\n                    <div>Changes</div>\r\n                </div>\r\n                {\r\n                    currenciesForList.map(el => {\r\n                        const changes = el.Value - el.Previous\r\n                        const changesStyle = `${changes > 0 ? 'up' : 'down'}`\r\n\r\n                        return (\r\n                            <div key={el.ID} className=\"ListOfCurrencies-item\">\r\n                                <div>{el.CharCode}</div>\r\n                                <div>{el.Nominal}</div>\r\n                                {\r\n                                    width > 700\r\n                                        ? <div className=\"ListOfCurrencies-item__name\">\r\n                                            {el.CharCode === 'GBP' ? el.Name.slice(0, 15) : el.Name}\r\n                                        </div>\r\n                                        : null\r\n                                }\r\n                                <div>{el.Value}</div>\r\n                                <div className={changesStyle}>{changes.toFixed(3)}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListOfCurrencies;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './Header.scss'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='headerBlock'>\r\n            <div>\r\n                <NavLink to={'/list'}>LIST</NavLink>\r\n                <NavLink to={'/'}>CONVERTER</NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import React, {useEffect} from 'react';\nimport './App.scss';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {CurrencyContainer} from './copmonents/ConverterContainer/ConverterContainer';\nimport {getCurrencies} from './redux/actions/actions';\nimport {storeRootType} from './redux/store';\nimport {Route, Switch } from 'react-router-dom';\nimport ListOfCurrencies from './copmonents/ListOfCurrencies/ListOfCurrencies';\nimport Header from './copmonents/Header/Header';\n\nfunction App() {\n    const {loading} = useSelector((state: storeRootType) => state.converter)\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getCurrencies())\n    }, [dispatch])\n\n    if (loading) {\n        return null\n    }\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <Switch>\n                <Route exact path={'/'} render={() => <CurrencyContainer/>} />\n                <Route path={'/list'} render={() => <ListOfCurrencies/>} />\n            </Switch>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsTypes, CurrencyActionsTypeInProgress} from '../actions/actions';\r\n\r\nexport type Currency = {\r\n    CharCode: string\r\n    Value: number\r\n    Previous: number\r\n    ID: string\r\n    Name: string\r\n    Nominal: number\r\n    NumCode: string\r\n}\r\n\r\nconst initialState = {\r\n    loading: true,\r\n    currenciesForList: [] as Currency[],\r\n    currencies: [{\r\n            CharCode: 'RUR',\r\n            Value: 0,\r\n            Previous: 0,\r\n            ID: '1423hgdfg5',\r\n            Name: 'Российский рубль',\r\n            Nominal: 1,\r\n            NumCode: ''\r\n        }],\r\n    mainCurrencies: [{\r\n        CharCode: 'RUR',\r\n        Value: 0,\r\n        Previous: 0,\r\n        ID: '1423hgdfg5',\r\n        Name: 'Российский рубль',\r\n        Nominal: 1,\r\n        NumCode: ''\r\n    }],\r\n    countFirstField: '',\r\n    countSecondField: '',\r\n    currencyFirstField: 'RUR',\r\n    currencySecondField: 'USD',\r\n    firstPopupCurrency: {} as Currency,\r\n    secondPopupCurrency: {} as Currency,\r\n}\r\n\r\nexport type CurrencyReducerStateType = typeof initialState\r\n\r\nexport const converterReducer = (state = initialState, action: CurrencyActionsTypeInProgress): CurrencyReducerStateType => {\r\n    switch (action.type) {\r\n        case ActionsTypes.SET_CURRENCIES: {\r\n            const filteredCurrencies = action.payload\r\n                .filter(el => el.CharCode !== 'XDR' && el.CharCode !== 'TJS')\r\n                .sort((a, b) => {\r\n                    if (a.Name < b.Name) return -1\r\n                    if (a.Name > b.Name) return 1\r\n                    return 0\r\n                })\r\n            return {\r\n                ...state,\r\n                currencies: [\r\n                    ...state.currencies, ...filteredCurrencies\r\n                    .map(el => (el.Nominal > 1) ? {...el, Value: el.Value / el.Nominal, Nominal: 1} : el)\r\n                ],\r\n                currenciesForList: filteredCurrencies\r\n            }\r\n        }\r\n        case ActionsTypes.SET_CURRENT_CURRENCY: {\r\n            return {\r\n                ...state,\r\n                currencyFirstField: action.payload.currencyOfFirstField,\r\n                currencySecondField: action.payload.currencyOfSecondField\r\n            }\r\n        }\r\n        case ActionsTypes.CHANGE_FIELD_VALUE: {\r\n            return {\r\n                ...state,\r\n                countFirstField: action.payload.amountFirstField,\r\n                countSecondField: action.payload.amountSecondField\r\n            }\r\n        }\r\n        case ActionsTypes.SET_LOADING: {\r\n            return {\r\n                ...state,\r\n                loading: action.payload\r\n            }\r\n        }\r\n        case ActionsTypes.SET_POPUP_CURRENCY: {\r\n            return {\r\n                ...state,\r\n                firstPopupCurrency: state.currencies.find(el => el.CharCode === action.payload.firstPopupCurrency)!,\r\n                secondPopupCurrency: state.currencies.find(el => el.CharCode === action.payload.secondPopupCurrency)!\r\n            }\r\n        }\r\n        case ActionsTypes.SET_MAIN_CURRENCY: {\r\n            return {\r\n                ...state,\r\n                mainCurrencies: [...state.mainCurrencies, ...action.payload]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport {converterReducer} from './reducer/converter-reducer';\r\n\r\nconst reducers = combineReducers({\r\n    converter: converterReducer\r\n})\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type storeRootType = ReturnType<typeof reducers>\r\n\r\n(window as any).store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n      <Provider store={store}>\n          <BrowserRouter>\n              <App />\n          </BrowserRouter>\n      </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}